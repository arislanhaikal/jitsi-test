{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./react/features/base/config/parseURLParams.js","webpack:///./node_modules/jitsi-meet-logger/lib/Logger.js","webpack:///./react/features/base/util/timeoutPromise.js","webpack:///./react/features/base/util/helpers.js","webpack:///./react/features/base/util/httpUtils.js","webpack:///./react/features/base/util/uri.js","webpack:///./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack:///./node_modules/jitsi-meet-logger/lib/index.js","webpack:///./react/features/base/util/loadScript.web.js","webpack:///./react/features/base/util/index.js","webpack:///./react/features/base/config/getRoomName.js","webpack:///./connection_optimization/do_external_connect.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","parseURLParams","_util__WEBPACK_IMPORTED_MODULE_0__","url","dontParse","source","paramStr","search","hash","params","paramParts","substr","split","length","firstParam","startsWith","forEach","part","param","decoded","decodeURIComponent","replace","undefined","JSON","parse","e","reportError","String","levels","trace","debug","info","log","warn","error","Logger","consoleTransport","console","globalTransports","logger","arguments","level","args","Array","slice","callerInfo","methodName","fileLocation","line","column","Error","stack","match","indexOf","getCallerInfo","transports","concat","id","apply","format","this","methods","keys","addGlobalTransport","transport","push","removeGlobalTransport","transportIdx","splice","setLevel","TRACE","DEBUG","INFO","LOG","WARN","ERROR","timeoutPromise","promise","timeout","Promise","resolve","reject","timeoutID","setTimeout","then","clearTimeout","reason","__filename","createDeferred","getBaseUrl","getJitsiMeetGlobalNS","assignIfDefined","require","getLogger","deferred","w","window","base","document","querySelector","href","protocol","host","location","JitsiMeetJS","app","target","to","nextKey","msg","onerror","doGetJSON","_timeoutPromise__WEBPACK_IMPORTED_MODULE_0__","RETRY_TIMEOUT","retry","fetchPromise","fetch","response","jsonify","json","ok","result","catch","status","APP_LINK_SCHEME","URI_PROTOCOL_PATTERN","getLocationContextRoot","parseStandardURIString","parseURIString","toURLString","_ROOM_EXCLUDE_PATTERN","_URI_AUTHORITY_PATTERN","_URI_PATH_PATTERN","_fixURIStringScheme","uri","regex","RegExp","exec","toLowerCase","substring","lastIndex","pathname","contextRootEndIndex","lastIndexOf","_objectToURLParamsArray","obj","encodeURIComponent","stringify","str","toString","_standardURIToString","authority","userinfoEndIndex","portBeginIndex","port","hostname","hashBeginIndex","contextRoot","room","fixedRoom","_fixRoom","thiz","URL","tmp","serverURL","scheme","endsWith","domain","roomName","jwt","urlPrefix","urlParamsArray","urlParamsString","join","urlObjectToString","LogCollector","logStorage","options","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","len","arg","prevMessage","text","count","_flush","start","_reschedulePublishInterval","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","idLoggers","loggers","curLevel","setLogLevelById","setLogLevel","loadScript","util","ScriptUtil","helpers","httpUtils","getRoomName","getroomnode","config","path","_react_features_base_config_getRoomName__WEBPACK_IMPORTED_MODULE_0__","_react_features_base_config_parseURLParams__WEBPACK_IMPORTED_MODULE_1__","createConnectionExternally","externalConnectUrl","isRecorder","token","connectionInfo","XMPPAttachInfo","data","checkForConnectHandlerAndConnect","errorCallback","APP","connect","handler"],"mappings":"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","file":"do_external_connect.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 940);\n","/* @flow */\n\nimport { reportError } from '../util';\n\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {string} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nexport default function parseURLParams(\n        url: URL,\n        dontParse: boolean = false,\n        source: string = 'hash'): Object {\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n    const paramParts = (paramStr && paramStr.substr(1).split('&')) || [];\n\n    // Detect and ignore hash params for hash routers.\n    if (source === 'hash' && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n\n    paramParts.forEach(part => {\n        const param = part.split('=');\n        const key = param[0];\n\n        if (!key) {\n            return;\n        }\n\n        let value;\n\n        try {\n            value = param[1];\n\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value).replace(/\\\\&/, '&');\n\n                value = decoded === 'undefined' ? undefined : JSON.parse(decoded);\n            }\n        } catch (e) {\n            reportError(\n                e, `Failed to parse URL parameter value: ${String(value)}`);\n\n            return;\n        }\n        params[key] = value;\n    });\n\n    return params;\n}\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","// @flow\n\n/**\n * Returns a new {@code Promise} which settles when a specific {@code Promise}\n * settles and is automatically rejected if the specified {@code Promise}\n * doesn't settle within a specific time interval.\n *\n * @param {Promise} promise - The {@code Promise} for which automatic rejecting\n * after the speicified timout is to be implemented.\n * @param {number} timeout - The number of milliseconds to wait the specified\n * {@code promise} to settle before automatically rejecting the returned\n * {@code Promise}.\n * @returns {Promise} - A new {@code Promise} which settles when the specified\n * {@code promise} settles and is automatically rejected after {@code timeout}\n * milliseconds.\n */\nexport function timeoutPromise<T>(\n        promise: Promise<T>,\n        timeout: number\n): Promise<T> {\n    return new Promise((resolve, reject) => {\n        const timeoutID\n            = setTimeout(() => reject(new Error('timeout')), timeout);\n\n        promise.then(\n            /* onFulfilled */ value => {\n                resolve(value);\n                clearTimeout(timeoutID);\n            },\n            /* onRejected */ reason => {\n                reject(reason);\n                clearTimeout(timeoutID);\n            }\n        );\n    });\n}\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates a deferred object.\n *\n * @returns {{promise, resolve, reject}}\n */\nexport function createDeferred(): Object {\n    const deferred = {};\n\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n\n    return deferred;\n}\n\n/**\n * Returns the base URL of the app.\n *\n * @param {Object} w - Window object to use instead of the built in one.\n * @returns {string}\n */\nexport function getBaseUrl(w: Object = window) {\n    const doc = w.document;\n    const base = doc.querySelector('base');\n\n    if (base && base.href) {\n        return base.href;\n    }\n\n    const { protocol, host } = w.location;\n\n    return `${protocol}//${host}`;\n}\n\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n\n    return window.JitsiMeetJS.app;\n}\n\n/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target: Object, source: Object) {\n    const to = Object(target);\n\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n\n    return to;\n}\n\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e: Object, msg: string = '') {\n    logger.error(msg, e);\n    window.onerror && window.onerror(msg, null, null, null, e);\n}\n","import { timeoutPromise } from './timeoutPromise';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The number of milliseconds before deciding that we need retry a fetch request.\n *\n * @type {number}\n */\nconst RETRY_TIMEOUT = 3000;\n\n/**\n * Wrapper around fetch GET requests to handle json-ifying the response\n * and logging errors.\n *\n * @param {string} url - The URL to perform a GET against.\n * @param {?boolean} retry - Whether the request will be retried after short timeout.\n * @returns {Promise<Object>} The response body, in JSON format, will be\n * through the Promise.\n */\nexport function doGetJSON(url, retry) {\n    const fetchPromise = fetch(url)\n        .then(response => {\n            const jsonify = response.json();\n\n            if (response.ok) {\n                return jsonify;\n            }\n\n            return jsonify\n                .then(result => Promise.reject(result));\n        })\n        .catch(error => {\n            logger.error('Error performing get:', url, error);\n\n            return Promise.reject(error);\n        });\n\n    if (retry) {\n        return timeoutPromise(fetchPromise, RETRY_TIMEOUT)\n            .catch(response => {\n                if (response.status >= 400 && response.status < 500) {\n                    return Promise.reject(response);\n                }\n\n                return timeoutPromise(fetchPromise, RETRY_TIMEOUT);\n            });\n    }\n\n    return fetchPromise;\n}\n","// @flow\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The app linking scheme.\n * TODO: This should be read from the manifest files later.\n */\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\n\n/**\n * A list of characters to be excluded/removed from the room component/segment\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\n * library utilized by jicofo.\n */\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\:\\\\?#\\\\[\\\\]@!$&\\'()*+,;=></\"]';\n\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * FIXME: The URL class exposed by JavaScript will not include the colon in\n * the protocol field. Also in other places (at the time of this writing:\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\n * the double dots, so things are inconsistent.\n *\n * @type {string}\n */\nexport const URI_PROTOCOL_PATTERN = '^([a-z][a-z0-9\\\\.\\\\+-]*:)';\n\n/**\n * Excludes/removes certain characters from a specific room (name) which are\n * incompatible with Jitsi Meet on the client and/or server sides.\n *\n * @param {?string} room - The room (name) to fix.\n * @private\n * @returns {?string}\n */\nfunction _fixRoom(room: ?string) {\n    return room\n        ? room.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\n        : room;\n}\n\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri: string) {\n    const regex = new RegExp(`${URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match: Array<string> | null = regex.exec(uri);\n\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n\n        /* eslint-disable no-param-reassign */\n\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n\n        /* eslint-enable no-param-reassign */\n    }\n\n    return uri;\n}\n\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }: { pathname: string }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n\n    return (\n        contextRootEndIndex === -1\n            ? '/'\n            : pathname.substring(0, contextRootEndIndex + 1));\n}\n\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(\n                `${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        } catch (e) {\n            logger.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str: string) {\n    /* eslint-disable no-param-reassign */\n\n    const obj: Object = {\n        toString: _standardURIToString\n    };\n\n    let regex;\n    let match: Array<string> | null;\n\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\n    // Usually, a browser will have already encoded any whitespace. In order to\n    // avoid potential later problems related to whitespace in URI, strip any\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\n    // whitespace so the stripping is deemed safe.\n    str = str.replace(/\\s/g, '');\n\n    // protocol\n    regex = new RegExp(URI_PROTOCOL_PATTERN, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority: string = match[1].substring(/* // */ 2);\n\n        str = str.substring(regex.lastIndex);\n\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n\n        obj.host = authority;\n\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n\n        // hostname\n        obj.hostname = authority;\n    }\n\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n\n    let pathname: ?string;\n\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    } else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    } else {\n        obj.search = ''; // Google Chrome\n    }\n\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n\n    /* eslint-enable no-param-reassign */\n\n    return obj;\n}\n\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     contextRoot: string,\n *     hash: string,\n *     host: string,\n *     hostname: string,\n *     pathname: string,\n *     port: string,\n *     protocol: string,\n *     room: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseURIString(uri: ?string) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n\n    const obj = parseStandardURIString(_fixURIStringScheme(uri));\n\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n\n    // contextRoot\n    obj.contextRoot = getLocationContextRoot(obj);\n\n    // The room (name) is the last component/segment of pathname.\n    const { pathname } = obj;\n\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\n    // on the client and/or server sides still don't support certain characters.\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    let room = pathname.substring(contextRootEndIndex + 1) || undefined;\n\n    if (room) {\n        const fixedRoom = _fixRoom(room);\n\n        if (fixedRoom !== room) {\n            room = fixedRoom;\n\n            // XXX Drive fixedRoom into pathname (because room is derived from\n            // pathname).\n            obj.pathname\n                = pathname.substring(0, contextRootEndIndex + 1) + (room || '');\n        }\n    }\n    obj.room = room;\n\n    return obj;\n}\n\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz: ?Object) {\n    // eslint-disable-next-line no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n\n    protocol && (str += protocol);\n\n    // TODO userinfo\n\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {Object|string} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj: ?(Object | string)): ?string {\n    let str;\n\n    switch (typeof obj) {\n    case 'object':\n        if (obj) {\n            if (obj instanceof URL) {\n                str = obj.href;\n            } else {\n                str = urlObjectToString(obj);\n            }\n        }\n        break;\n\n    case 'string':\n        str = String(obj);\n        break;\n    }\n\n    return str;\n}\n\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o: Object): ?string {\n    // First normalize the given url. It come as o.url or split into o.serverURL\n    // and o.room.\n    let tmp;\n\n    if (o.serverURL && o.room) {\n        tmp = new URL(o.room, o.serverURL).toString();\n    } else if (o.room) {\n        tmp = o.room;\n    } else {\n        tmp = o.url || '';\n    }\n\n    const url = parseStandardURIString(_fixURIStringScheme(tmp));\n\n    // protocol\n    if (!url.protocol) {\n        let protocol: ?string = o.protocol || o.scheme;\n\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n\n    // authority & pathname\n    let { pathname } = url;\n\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain: ?string = o.domain || o.host || o.hostname;\n\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port }\n                = parseStandardURIString(\n\n                    // XXX The value of domain in supposed to be host/hostname\n                    // and, optionally, pathname. Make sure it is not taken for\n                    // a pathname only.\n                    _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\n\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n\n    // pathname\n\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n\n    if (room\n            && (url.pathname.endsWith('/')\n                || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n\n    url.pathname = pathname;\n\n    // query/search\n\n    // Web's ExternalAPI jwt\n    const { jwt } = o;\n\n    if (jwt) {\n        let { search } = url;\n\n        if (search.indexOf('?jwt=') === -1 && search.indexOf('&jwt=') === -1) {\n            search.startsWith('?') || (search = `?${search}`);\n            search.length === 1 || (search += '&');\n            search += `jwt=${jwt}`;\n\n            url.search = search;\n        }\n    }\n\n    // fragment/hash\n\n    let { hash } = url;\n\n    for (const urlPrefix of [ 'config', 'interfaceConfig', 'devices' ]) {\n        const urlParamsArray\n            = _objectToURLParamsArray(\n                o[`${urlPrefix}Overwrite`]\n                    || o[urlPrefix]\n                    || o[`${urlPrefix}Override`]);\n\n        if (urlParamsArray.length) {\n            let urlParamsString\n                = `${urlPrefix}.${urlParamsArray.join(`&${urlPrefix}.`)}`;\n\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            } else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n\n    url.hash = hash;\n\n    return url.toString() || undefined;\n}\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","// @flow\n\ndeclare var JitsiMeetJS: Object;\n\n/**\n * Loads a script from a specific URL. The script will be interpreted upon load.\n *\n * @param {string} url - The url to be loaded.\n * @returns {Promise} Resolved with no arguments when the script is loaded and\n * rejected with the error from JitsiMeetJS.ScriptUtil.loadScript method.\n */\nexport function loadScript(url: string): Promise<void> {\n    return new Promise((resolve, reject) =>\n        JitsiMeetJS.util.ScriptUtil.loadScript(\n            url,\n            /* async */ true,\n            /* prepend */ false,\n            /* relativeURL */ false,\n            /* loadCallback */ resolve,\n            /* errorCallback */ reject));\n}\n","export * from './helpers';\nexport * from './httpUtils';\nexport * from './loadScript';\nexport * from './uri';\n","/* @flow */\n\ndeclare var config: Object;\n\n/**\n * Builds and returns the room name.\n *\n * @returns {string}\n */\nexport default function getRoomName(): ?string {\n    const { getroomnode } = config;\n    const path = window.location.pathname;\n    let roomName;\n\n    // Determine the room node from the URL.\n    if (getroomnode && typeof getroomnode === 'function') {\n        roomName = getroomnode.call(config, path);\n    } else {\n        // Fall back to the default strategy of making assumptions about how the\n        // URL maps to the room (name). It currently assumes a deployment in\n        // which the last non-directory component of the path (name) is the\n        // room.\n        roomName\n            = path.substring(path.lastIndexOf('/') + 1).toLowerCase()\n                || undefined;\n    }\n\n    return roomName;\n}\n","/* global config, createConnectionExternally */\n\nimport getRoomName from '../react/features/base/config/getRoomName';\nimport parseURLParams from '../react/features/base/config/parseURLParams';\n\n/**\n * Implements external connect using createConnectionExternally function defined\n * in external_connect.js for Jitsi Meet. Parses the room name and JSON Web\n * Token (JWT) from the URL and executes createConnectionExternally.\n *\n * NOTE: If you are using lib-jitsi-meet without Jitsi Meet, you should use this\n * file as reference only because the implementation is Jitsi Meet-specific.\n *\n * NOTE: For optimal results this file should be included right after\n * external_connect.js.\n */\n\nif (typeof createConnectionExternally === 'function') {\n    // URL params have higher priority than config params.\n    let url\n        = parseURLParams(window.location, true, 'hash')[\n                'config.externalConnectUrl']\n            || config.externalConnectUrl;\n    const isRecorder\n        = parseURLParams(window.location, true, 'hash')['config.iAmRecorder'];\n\n    let roomName;\n\n    if (url && (roomName = getRoomName()) && !isRecorder) {\n        url += `?room=${roomName}`;\n\n        const token = parseURLParams(window.location, true, 'search').jwt;\n\n        if (token) {\n            url += `&token=${token}`;\n        }\n\n        createConnectionExternally(\n            url,\n            connectionInfo => {\n                // Sets that global variable to be used later by connect method\n                // in connection.js.\n                window.XMPPAttachInfo = {\n                    status: 'success',\n                    data: connectionInfo\n                };\n                checkForConnectHandlerAndConnect();\n            },\n            errorCallback);\n    } else {\n        errorCallback();\n    }\n} else {\n    errorCallback();\n}\n\n/**\n * Check if connect from connection.js was executed and executes the handler\n * that is going to finish the connect work.\n *\n * @returns {void}\n */\nfunction checkForConnectHandlerAndConnect() {\n    window.APP\n        && window.APP.connect.status === 'ready'\n        && window.APP.connect.handler();\n}\n\n/**\n * Implements a callback to be invoked if anything goes wrong.\n *\n * @param {Error} error - The specifics of what went wrong.\n * @returns {void}\n */\nfunction errorCallback(error) {\n    // The value of error is undefined if external connect is disabled.\n    error && console.warn(error);\n\n    // Sets that global variable to be used later by connect method in\n    // connection.js.\n    window.XMPPAttachInfo = {\n        status: 'error'\n    };\n    checkForConnectHandlerAndConnect();\n}\n"],"sourceRoot":""}